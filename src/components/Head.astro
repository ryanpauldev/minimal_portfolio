---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link
  rel="icon"
  type="image/svg+xml"
  href="/alien.svg"
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href="/human.svg"
  media="(prefers-color-scheme: light)"
/>

<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]',
      ),
    ].forEach((link) => link.remove()),
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
    });

    //one button to switch between themes
    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    });

    const themeToggleButton = document.getElementById("theme-toggle-button");
    const lightIcon = document.getElementById("theme-icon-light");
    const darkIcon = document.getElementById("theme-icon-dark");

    if (themeToggleButton) {
      themeToggleButton.addEventListener("click", () => {
        const isDarkMode = document.documentElement.classList.contains("dark");
        const newTheme = isDarkMode ? "light" : "dark";

        localStorage.setItem("theme", newTheme);
        toggleTheme(newTheme === "dark");
        updateThemeIcons(newTheme);
      });

      function updateThemeIcons(theme) {
        if (theme === "dark") {
          lightIcon.classList.remove("hidden"); // Show Sun icon
          darkIcon.classList.add("hidden"); // Hide Moon icon
        } else {
          darkIcon.classList.remove("hidden"); // Show Moon icon
          lightIcon.classList.add("hidden"); // Hide Sun icon
        }
      }

      // Ensure correct icon is displayed on page load
      updateThemeIcons(
        document.documentElement.classList.contains("dark") ? "dark" : "light",
      );
    }

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();

  function setupBackToTopButton() {
    const backToTopButton = document.getElementById("back-to-top");

    if (!backToTopButton) return;

    function toggleBackToTop() {
      if (window.scrollY > 100) {
        backToTopButton.style.opacity = "1"; // ‚úÖ Smooth fade-in
        backToTopButton.style.pointerEvents = "auto"; // ‚úÖ Ensure it's clickable when visible
      } else {
        backToTopButton.style.opacity = "0"; // ‚úÖ Smooth fade-out
        setTimeout(() => {
          if (window.scrollY === 0) {
            backToTopButton.style.pointerEvents = "none"; // ‚úÖ Prevent clicks AFTER fading out
          }
        }, 500); // Match CSS transition time
      }
    }

    window.addEventListener("scroll", toggleBackToTop);

    backToTopButton.addEventListener("click", (event) => {
      event.preventDefault();
      window.scrollTo({ top: 0, left: 0, behavior: "smooth" });

      setTimeout(() => {
        window.dispatchEvent(new Event("scroll"));
      }, 300);
    });
  }

  document.addEventListener("DOMContentLoaded", setupBackToTopButton);
  document.addEventListener("astro:after-swap", setupBackToTopButton);

  /////
  function loadParticles() {
    if (!window.tsParticles) return; // ‚úÖ Prevent errors if tsParticles is not loaded

    const isDarkMode = document.documentElement.classList.contains("dark");

    const particlesConfig = isDarkMode
      ? {
          // üåô **DARK MODE (Timelapse Starry Sky)**
          background: { color: "transparent" },
          fullScreen: { enable: true, zIndex: -2 },
          particles: {
            color: { value: ["#ffffff", "#DAF7A6", "#89CFF0"] }, // ‚úÖ White & Yellow stars
            number: { value: 50 }, // ‚úÖ 50 stars
            opacity: {
              value: 0.6,
              random: true,
              animation: {
                enable: true,
              },
            },
            size: { value: 1.2 }, // ‚úÖ Slightly larger stars
            move: {
              enable: true,
              speed: 0.08, // ‚úÖ All stars move at the same slow speed
              direction: "right", // ‚úÖ Moves from left to right
              straight: true, // ‚úÖ No random movement, smooth flow
              outModes: { default: "out" }, // ‚úÖ When a star leaves, a new one enters
            },
          },
        }
      : {
          // ‚òÄÔ∏è **LIGHT MODE (Clouds + Butterflies)**
          background: { color: "transparent" },
          fullScreen: { enable: true, zIndex: -2 },
          particles: {
            number: { value: 20 },
            move: {
              enable: true,
              speed: 0.1,
              direction: "right",
              outModes: { default: "out" },
            },
            shape: {
              type: ["image"],
              image: [
                { src: "/cloud.svg", width: 120, height: 80 },
                { src: "/butterfly.svg", width: 50, height: 50 },
              ],
            },
            opacity: {
              value: 0.6,
              random: true,
              animation: { enable: true, speed: 0.2, minimumValue: 0.5 },
            },
            size: {
              value: 50,
              random: true,
              animation: { enable: true, speed: 1, minimumValue: 20 },
            },
            move: {
              enable: true,
              speed: 0.2,
              random: true,
              outModes: { default: "out" },
              path: { enable: true },
            },
          },
        };

    // ‚úÖ Remove existing particles before reloading (prevents duplicates)
    window.tsParticles.dom().forEach((instance) => instance.destroy());

    // ‚úÖ Load new particle system
    window.tsParticles.load("tsparticles", particlesConfig);
  }

  // ‚úÖ Run particles on first page load
  document.addEventListener("DOMContentLoaded", loadParticles);

  // ‚úÖ Reload particles after Astro page transitions
  document.addEventListener("astro:after-swap", () => {
    setTimeout(loadParticles, 1);
  });

  // ‚úÖ Watch for theme changes and reload particles
  let lastTheme = document.documentElement.classList.contains("dark")
    ? "dark"
    : "light";

  const observer = new MutationObserver(() => {
    requestAnimationFrame(() => {
      const currentTheme = document.documentElement.classList.contains("dark")
        ? "dark"
        : "light";
      if (currentTheme !== lastTheme) {
        lastTheme = currentTheme;
        setTimeout(loadParticles, 1);
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });

  //rainbow bgs
  document.addEventListener("DOMContentLoaded", () => {
    const links = document.querySelectorAll(".cycle-hover-bg");

    const colors = [
      "bg-red-200",
      "bg-orange-200",
      "bg-amber-200",
      "bg-yellow-200",
      "bg-lime-200",
      "bg-green-200",
      "bg-emerald-200",
      "bg-teal-200",
      "bg-cyan-200",
      "bg-sky-200",
      "bg-blue-200",
      "bg-indigo-200",
      "bg-violet-200",
      "bg-purple-200",
      "bg-fuchsia-200",
      "bg-pink-200",
      "bg-rose-200",
    ];

    let colorIndex = 0; // Keeps track of current color

    links.forEach((link) => {
      link.addEventListener("mouseenter", () => {
        // Remove existing colors
        colors.forEach((color) => link.classList.remove(color));

        // Apply the next color in the cycle
        link.classList.add(colors[colorIndex]);

        // Move to the next color (loop back if at the end)
        colorIndex = (colorIndex + 1) % colors.length;
      });

      // Optional: Reset background when mouse leaves
      link.addEventListener("mouseleave", () => {
        colors.forEach((color) => link.classList.remove(color));
      });
    });
  });
</script>
